---
import Advent24Layout from '../layouts/Advent24Layout.astro'
import { getCollection } from 'astro:content'
import XmasSquare from '../components/XmasSquare.astro'

const episodes = await getCollection('advent23')

const sortedEpisodes = episodes.slice().sort((a, b) => a.data.date.getTime() - b.data.date.getTime())
---

<Advent24Layout title="">
  <div class="scroll-container">
    <XmasSquare text="24" x={150} y={150} enabled={true}>HELLO</XmasSquare>
    <XmasSquare text="1" x={250} y={450} enabled={false}>HI</XmasSquare>
    <img src="advent24.png" alt="" />
  </div>
</Advent24Layout>

<style>
  .scroll-container {
    height: 100dvh;
    width: 100vw;
    overflow: hidden;
    position: relative;
  }
  .img {
    position: absolute;
    top: 0;
    left: 0;
  }
</style>

<script>
  const container = document.querySelector('.scroll-container') as HTMLElement

  let isDragging = false
  let startX: number, startY: number, scrollLeft: number, scrollTop: number
  let lastX: number, lastY: number
  let velocityX = 0,
    velocityY = 0
  let momentumFrame: number | null = null

  container.addEventListener('mousedown', (e: MouseEvent) => {
    e.preventDefault()
    isDragging = true
    container.style.cursor = 'grabbing'

    const x = e.pageX
    const y = e.pageY

    onStart(x, y)
  })

  container.addEventListener(
    'touchstart',
    (e: TouchEvent) => {
      e.preventDefault()
      isDragging = true

      const touch = e.touches[0]
      const x = touch.pageX
      const y = touch.pageY

      onStart(x, y)
    },
    { passive: false }
  )

  container.addEventListener('mousemove', (e: MouseEvent) => {
    if (!isDragging) return
    e.preventDefault()

    const x = e.pageX
    const y = e.pageY

    onMove(x, y)
  })

  container.addEventListener(
    'touchmove',
    (e: TouchEvent) => {
      if (!isDragging) return
      e.preventDefault()

      const touch = e.touches[0]
      const x = touch.pageX
      const y = touch.pageY

      onMove(x, y)
    },
    { passive: false }
  )

  container.addEventListener('mouseup', onEnd)
  container.addEventListener('mouseleave', onEnd)
  container.addEventListener('touchend', onEnd)

  function onMove(x: number, y: number) {
    const deltaX = x - container.offsetLeft
    const deltaY = y - container.offsetTop
    const walkX = startX - deltaX
    const walkY = startY - deltaY

    // Calculate velocity
    velocityX = x - lastX
    velocityY = y - lastY

    lastX = x
    lastY = y

    container.scrollLeft = scrollLeft + walkX
    container.scrollTop = scrollTop + walkY
  }

  function onStart(x: number, y: number) {
    cancelMomentum() // Stop any existing momentum
    startX = x - container.offsetLeft
    startY = y - container.offsetTop
    scrollLeft = container.scrollLeft
    scrollTop = container.scrollTop

    lastX = x
    lastY = y

    velocityX = 0
    velocityY = 0
  }

  function onEnd() {
    isDragging = false
    container.style.cursor = 'grab'

    applyMomentum()
  }

  function applyMomentum() {
    const deceleration = 0.95 // Deceleration factor (lower = faster stop)
    const minVelocity = 0.5 // Minimum velocity to stop animation

    const momentum = () => {
      if (Math.abs(velocityX) > minVelocity || Math.abs(velocityY) > minVelocity) {
        container.scrollLeft -= velocityX
        container.scrollTop -= velocityY

        // Apply deceleration
        velocityX *= deceleration
        velocityY *= deceleration

        // Request the next frame
        momentumFrame = requestAnimationFrame(momentum)
      } else {
        cancelMomentum()
      }
    }

    momentum()
  }

  function cancelMomentum() {
    if (momentumFrame !== null) {
      cancelAnimationFrame(momentumFrame)
      momentumFrame = null
    }
  }
</script>
