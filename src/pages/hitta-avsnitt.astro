---
import Footer from '../components/Footer.astro'
import GreenBlob from '../components/GreenBlob.astro'
import YellowBlob from '../components/YellowBlob.astro'
import Layout from '../layouts/Layout.astro'
import keysEnter from '../images/keys-enter.png'
import keysHeart from '../images/keys-heart.png'
import keysHome from '../images/keys-home.png'
import sad from '../images/sad.png'
import { Image } from '@astrojs/image/components'
import UnderlinedLink from '../components/UnderlinedLink.astro'
---

<Layout title="hitta avsnitt - asdf">
  <main class="main">
    <h1>Hitta avsnitt</h1>
    <input id="searchInput" class="doodle" placeholder="Skriv nått du vill hitta här" />
    <div class="clean-state">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 183 110">
        <path
          fill="#1D1D1D"
          d="M181.2 91a881.5 881.5 0 0 1-24.3 5.7 164.2 164.2 0 0 0-17.2 4.4A306.6 306.6 0 0 1 126 105a149.4 149.4 0 0 1-22.7 3.3 88.4 88.4 0 0 1-15-.7 169.3 169.3 0 0 1-15.5-3.4 718.9 718.9 0 0 1-16.3-5.5 267.2 267.2 0 0 1-16.6-7.3 1159 1159 0 0 1-8.1-4.2 49 49 0 0 1-7.6-4.8 74.3 74.3 0 0 1-6.4-5.7 33.6 33.6 0 0 1-10-21.5c-.3-3-.2-6 .4-9a65 65 0 0 1 2.2-9.2 287.2 287.2 0 0 1 6-16.2 25.8 25.8 0 0 0 2.1-9.4l-.2-.4v-.1s0-.1 0 0l.1-.2h.5s0 .1 0 0v.1l.1.1v.1a110 110 0 0 1-1.8 6h-.2c0 .1 0 .1 0 0h-.1s-.1 0 0 0h-.1V16.6H17s0 .1 0 0c.1 0 .1.1 0 .1v.1c.1 0 .1 0 0 0v.1c0 .1-.1.1-.1 0-.1.1-.1.1-.1 0h-.1v-.1a46.7 46.7 0 0 0 1.6-6v-.2h.1s.1 0 0 0h.4v.1c.1 0 .2 0 .1.1v.1l.3 1.5c0 1 0 2.2-.3 3.5-.3 1.3-1 3-1.9 5l-2.8 7.4-3 8.8c-1 3-1.6 6.1-2.1 9a36.6 36.6 0 0 0 1.2 16.5c.8 2.3 1.8 4.6 3.2 7 1.3 2.2 3 4.3 4.9 6.2 2 2 4 3.8 6.3 5.7 2.2 1.8 4.7 3.4 7.4 4.7l8.1 4.1a100 100 0 0 0 8.3 3.8l8.3 3.4 8.1 3c2.8.8 5.5 1.7 8 2.6 2.6.9 5.1 1.5 7.7 2l7.7 1.4c2.5.4 5 .7 7.5.7l7.3-.1c2.4 0 4.9-.3 7.5-.6a270.7 270.7 0 0 0 15-2.6 329.6 329.6 0 0 0 20.1-5.7l6-1.5c1.8-.5 3.6-.9 5-1 1.6-.1 3.2-.4 4.9-.8l4.6-1.1 4.4-1.1c1.5-.4 2.9-.8 4.3-1a43.4 43.4 0 0 0 6.1-1.5h.1s.1.1.2 0V90.7c.1 0 .1 0 0 0v.2c0 .1 0 .1 0 0l-.1.1Z"
        ></path>
        <path
          stroke="#1D1D1D"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="1.8"
          d="m18.2 11 .2.4c.2.3 0 1.4-.3 3.3-.3 2-.9 4-1.8 6a118 118 0 0 0-6 16.3 65 65 0 0 0-2.2 9.2 36.3 36.3 0 0 0 1.1 17 35.7 35.7 0 0 0 8.5 13.5 49 49 0 0 0 14 10.5l8 4.2a130.5 130.5 0 0 0 16.7 7.3 167.4 167.4 0 0 0 16.3 5.5 76.9 76.9 0 0 0 15.5 3.4 61 61 0 0 0 15 .7A148 148 0 0 0 126 105a141.3 141.3 0 0 0 13.8-4 217.4 217.4 0 0 1 12-3.4 46 46 0 0 1 5.2-1 48.6 48.6 0 0 0 9.5-2 276.2 276.2 0 0 0 8.7-2.1l6-1.6h0c.1 0 .1-.1.2 0 0 0 0 0 0 0v-.2c0 .1 0 0 0 0 .1-.1.1-.1 0-.1 0 0 0 0 0 0v-.2c0 .1 0 0 0 0 0-.1 0-.1 0 0l-.1-.1s0 0 0 0h-.2s-.7 0-2 .5l-4.1 1c-1.4.2-2.8.6-4.3 1s-3 .8-4.4 1l-4.6 1.2c-1.7.4-3.3.7-4.8.8-1.6.1-3.3.5-5.2 1l-5.9 1.5c-2 .5-4 1.1-6.2 1.9a118.2 118.2 0 0 1-13.9 3.8 91.2 91.2 0 0 1-15 2.6 74.5 74.5 0 0 1-14.8.7c-2.5 0-5-.3-7.5-.7l-7.7-1.4c-2.6-.5-5.1-1.1-7.7-2-2.5-.9-5.2-1.8-8-2.6l-8.1-3-8.3-3.4a100 100 0 0 1-8.3-3.8l-8-4c-2.8-1.4-5.3-3-7.5-4.8a95 95 0 0 1-6.3-5.7c-2-1.9-3.6-4-5-6.3A32.6 32.6 0 0 1 8.8 55c-.2-2.8 0-5.7.4-8.7.5-2.9 1.2-6 2.1-9A269.6 269.6 0 0 1 19 16a10.8 10.8 0 0 0 0-5m-.7 0v-.1m0 0a65.2 65.2 0 0 0-1.2 6.2s0 0 0 0V17c.1 0 .1 0 0 0v-.2c.1 0 .1 0 0 0 0 0 0 0 0 0v-.1s-.1 0 0 0h-.2s0 0 0 0 0 0 0 0l-.1.1s0 0 0 0v.1s0 0 0 0v.1h.1c0 .1 0 .1 0 0h.2s0 0 0 0 0 0 0 0a260.6 260.6 0 0 0 2-6m-.8 0v-.1m0 0s0-.1 0 0m0 0s0 0 0 0m0 0 .1-.2m0 .1s0 0 0 0m0 0 .1-.1m0 0s0 0 0 0m0 0s0 0 0 0m0 0s.1 0 0 0m0 0h.2m-.1 0s0 0 0 0m0 0h.2m-.1 0s0 0 0 0m0 0h.2m-.1 0s0 0 0 0m0 0s.1.1.1 0m0 0s0 0 0 0m0 0v.1m0 0s0 0 0 0m0 0 .1.1m0 0c0-.1 0 0 0 0m0 0v.1m0 0s0 0 0 0"
        ></path>
        <path
          fill="#1D1D1D"
          stroke="#1D1D1D"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="1.8"
          d="M1 25.7a40.5 40.5 0 0 1 6-11.3 47 47 0 0 1 12.2-12c1.5-.7 3.3-.9 5.3-.5 2 .3 3.2 1.7 3.5 4.2.3 2.5.2 5-.3 7.4-.5 2.3-.4 4.6.2 6.6.6 2.1 1.4 3.7 2.3 4.9a17.9 17.9 0 0 1 1.4 2s0 0 0 0v.1s0 0 0 0h-.2c0 .1 0 .1 0 0h-.2s0 0 0 0-.1-.1 0-.2c0 0 0 0 0 0-.1 0 0 0 0-.1 0 0 0 0 0 0l.1-.1s0 0 0 0h.2s0 0 0 0h.1v.4s0 0 0 0h-.2c0 .1 0 .1 0 0h-.1s0 0 0 0h-.1l-1.5-1.8c-1-1.2-1.8-3-2.5-5a13 13 0 0 1-.3-6.9c.5-2.4.7-4.7.5-7-.1-2.4-1.1-3.8-3-4-1.8-.3-3.4-.1-4.8.6s-2.8 1.7-4.2 3A53 53 0 0 0 1.3 26h-.1s0 0 0 0H1s0 0 0 0V26s-.1-.1 0-.1c0 0 0 0 0 0-.1-.2-.1-.2 0-.2h0Z"
        ></path>
      </svg>
      <span>Sök på nått vi sagt eller nått som står i beskrivningen, och hojta om det inte funkar!</span>
    </div>
    <div class="empty-state hidden">
      <Image src={sad} alt="a sad smiley" />
      <span>Inga träffar..</span>
    </div>
    <div id="episodeList"></div>
    <button class="load-more doodle hidden">Ladda fler</button>
    <Footer />
    <GreenBlob class="green-blob" />
    <Image src={keysEnter} alt="" class="keys-enter bg-image" />
    <Image src={keysHeart} alt="" class="keys-heart bg-image" />
    <Image src={keysHome} alt="" class="keys-home bg-image" />
  </main>
  <div class="yellow-blob-wrapper">
    <YellowBlob class="yellow-blob" />
  </div>
  <UnderlinedLink href="#" class="hidden" id="underlined-link" />
</Layout>

<script>
  // /!\ Here be dragons /!\
  import algoliasearch from 'algoliasearch/lite'

  const intl = new Intl.DateTimeFormat('sv-SE', { dateStyle: 'long' })

  const debounce = (func: Function, delay: number) => {
    let timer: ReturnType<typeof setTimeout>
    return (...args: any) => {
      clearTimeout(timer)
      timer = setTimeout(() => {
        func(...args)
      }, delay)
    }
  }

  const removeLinksInBrackets = (content: string) => {
    return content.replace(/\[.*?\]/g, '')
  }

  const createUnderlinedLink = () => {
    var elem = document.querySelector('#underlined-link') as HTMLAnchorElement
    if (!elem) throw new Error('Underlined link not found')

    var clone = elem.cloneNode(true) as HTMLAnchorElement
    clone.id = ''
    clone.classList.remove('hidden')

    return clone
  }

  interface Episode {
    slug: string
    title: string
    content: string
    date: string
    number: number
    joke: { setup: string; punchline: string }
    transcription: { author: string | null; timestamp: string; line: string }[]
  }

  const input = document.getElementById('searchInput') as HTMLInputElement
  const output = document.getElementById('episodeList')

  if (!input || !output) throw new Error('Input or output element not found')

  const client = algoliasearch('B59YEH9ZES', 'bdda85ef25daee6621cead0f549b5a1e')
  let data: Awaited<ReturnType<typeof search>>['hits'] = []
  let page = 0

  const cleanStateEl = document.querySelector('.clean-state') as HTMLDivElement
  const emptyStateEl = document.querySelector('.empty-state') as HTMLDivElement
  const loadMoreButton = document.querySelector('.load-more') as HTMLButtonElement
  loadMoreButton.onclick = async (ev) => {
    ev.preventDefault()
    page++
    const { hits, total } = await search(input.value)
    data = data.concat(hits)
    render()

    if (total > data.length) {
      loadMoreButton.classList.remove('hidden')
    } else {
      loadMoreButton.classList.add('hidden')
    }
  }

  const search = async (query: string) => {
    if (!query) return { hits: [], total: 0 }

    const { results } = await client.search<Episode>([
      {
        indexName: 'episodes',
        query,
        params: {
          hitsPerPage: 10,
          page,
        },
      },
    ])

    return { hits: results[0].hits, total: results[0].nbHits }
  }

  const clear = () => {
    output.innerHTML = ''
    data = []
    page = 0
    loadMoreButton.classList.add('hidden')
    cleanStateEl.classList.remove('hidden')
    emptyStateEl.classList.add('hidden')
  }

  const render = () => {
    output.innerHTML = ''

    if (data.length === 0) {
      if (input.value) {
        console.log('hiding clean state')
        emptyStateEl.classList.remove('hidden')
        cleanStateEl.classList.add('hidden')
      } else {
        console.log('showing clean state')
        emptyStateEl.classList.add('hidden')
        cleanStateEl.classList.remove('hidden')
      }
    } else {
      console.log('hiding clean state')
      emptyStateEl.classList.add('hidden')
      cleanStateEl.classList.add('hidden')
    }

    data.forEach((episodeData) => {
      if (!episodeData) return

      const episode = document.createElement('div')
      episode.classList.add('episode')

      const title = episodeData._highlightResult?.title?.value || episodeData.title
      const titleLink = document.createElement('a')
      titleLink.classList.add('episode__title')
      titleLink.href = '/' + episodeData.slug
      const titleEl = document.createElement('h3')
      titleEl.innerHTML = title
      titleLink.appendChild(titleEl)
      episode.appendChild(titleLink)

      const date = episodeData.date
      const dateEl = document.createElement('span')
      dateEl.classList.add('episode__date')
      dateEl.innerHTML = intl.format(new Date(date))
      episode.appendChild(dateEl)

      const contentEl = document.createElement('p')
      contentEl.classList.add('episode__content')
      const contentSnippet = episodeData._snippetResult?.content
      if (contentSnippet && contentSnippet.matchLevel !== 'none') {
        const content = episodeData._snippetResult?.content.value || episodeData.content
        contentEl.innerHTML = removeLinksInBrackets(content)
        episode.appendChild(contentEl)
      } else {
        const content = episodeData.content
        contentEl.innerHTML = removeLinksInBrackets(content).slice(0, 200) + '...'
        episode.appendChild(contentEl)
      }

      const lineSnippets = episodeData._highlightResult?.transcription?.filter(
        (x) => x && x.line && x.line.matchLevel !== 'none'
      )
      if (lineSnippets && lineSnippets.length > 0) {
        const firstFive = lineSnippets.slice(0, 5)
        firstFive.forEach((lineSnippet) => {
          if (!lineSnippet || !lineSnippet.line) return

          const lineEl = document.createElement('div')
          lineEl.classList.add('episode__line')

          const timeStampEl = document.createElement('span')
          timeStampEl.classList.add('episode__timestamp')
          timeStampEl.innerHTML = lineSnippet.timestamp?.value || 'N/A'

          const textEl = document.createElement('span')
          textEl.innerHTML = lineSnippet.line.value

          lineEl.appendChild(timeStampEl)
          lineEl.appendChild(textEl)

          episode.appendChild(lineEl)
        })
        if (lineSnippets.length > 5) {
          const moreHits = lineSnippets.length - 5
          const moreEl = createUnderlinedLink()
          moreEl.href = '/' + episodeData.slug
          moreEl.classList.add('episode__more')
          moreEl.querySelector('span')!.innerHTML = `...och ${moreHits} ${
            moreHits === 1 ? 'träff' : `träffar`
          } till i transkriptionen`
          episode.appendChild(moreEl)
        }
      }

      output.appendChild(episode)
    })
  }

  input.addEventListener('input', (e) => {
    const value = (e.target as HTMLInputElement).value
    if (!value) {
      clear()
      return
    }
    debouncedSearch(value)
  })

  const debouncedSearch = debounce(async (value: string) => {
    const { hits, total } = await search(value)

    data = hits

    render()

    if (total > data.length) {
      loadMoreButton.classList.remove('hidden')
    } else {
      loadMoreButton.classList.add('hidden')
    }
  }, 200)
</script>

<style>
  .main {
    position: relative;
  }

  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
    margin-top: 36px;
  }

  #searchInput {
    margin-bottom: 36px;
    font-family: 'Shantell Sans', system-ui, sans-serif;
    transform: rotateZ(1deg);
  }

  #episodeList {
    display: flex;
    flex-direction: column;
    gap: 36px;
  }

  #episodeList :global(em) {
    font-weight: bold;
    font-style: normal;
  }

  #episodeList :global(.episode__title) {
    font-weight: bold;
    font-style: normal;
    color: black;
    text-decoration: none;
  }

  #episodeList :global(.episode__title h3) {
    font-variation-settings: 'BNCE' 0, 'wght' 600;
    margin-bottom: 0;
  }

  #episodeList :global(.episode__date) {
    opacity: 0.6;
    font-family: 'Shantell Sans', system-ui, sans-serif;
    font-size: 14px;
    margin-bottom: 8px;
  }

  #episodeList :global(.episode) {
    display: flex;
    flex-direction: column;
  }

  #episodeList :global(.episode__content) {
    white-space: pre-wrap;
    margin-bottom: 16px;
  }
  #episodeList :global(.episode__line) {
    white-space: pre-wrap;
    display: flex;
    gap: 16px;
  }
  #episodeList :global(.episode__timestamp) {
    opacity: 0.6;
  }
  #episodeList :global(.episode__more) {
    margin-left: auto;
    font-family: 'Shantell Sans', system-ui, sans-serif;
    margin-top: 8px;
  }
  .load-more {
    background-color: transparent;
    font-family: 'Shantell Sans', system-ui, sans-serif;
    margin: 0 auto;
    cursor: pointer;
    margin-top: 36px;
  }

  .yellow-blob-wrapper {
    width: 500px;
    height: 500px;
    overflow: hidden;
    position: absolute;
    right: 0;
    bottom: 0;
    z-index: -1;
  }
  .yellow-blob {
    right: -250px;
    top: 180px;
  }

  .green-blob {
    top: -185px;
    left: -800px;
    transform: rotateZ(130deg);
  }

  .keys-heart {
    left: -300px;
    width: 200px;
    top: 200px;
  }
  .keys-enter {
    top: 400px;
    width: 200px;
  }
  .keys-home {
    right: -400px;
    width: 300px;
  }
  .clean-state {
    font-family: 'Shantell Sans', system-ui, sans-serif;
    text-align: end;
    margin-left: auto;
    margin-right: 24px;
    margin-top: 36px;
    display: flex;
  }
  .clean-state span {
    transform: rotateZ(-1deg);
    display: block;
    max-width: 260px;
  }
  .clean-state svg {
    width: 140px;
    margin-top: -100px;
    margin-right: 16px;
  }
  .empty-state {
    font-family: 'Shantell Sans', system-ui, sans-serif;
    margin: 80px auto;
  }
  .empty-state span {
    display: block;
    transform: rotateZ(-5deg);
    margin-right: -16px;
  }
  .empty-state img {
    object-fit: contain;
    max-width: 100%;
    max-height: 100%;
    width: 120px;
    height: auto;
    margin-left: -16px;
  }
  .hidden {
    display: none;
  }
</style>
