---
import Footer from '../components/Footer.astro'
import GreenBlob from '../components/GreenBlob.astro'
import YellowBlob from '../components/YellowBlob.astro'
import Layout from '../layouts/Layout.astro'
import keysEnter from '../images/keys-enter.png'
import keysHeart from '../images/keys-heart.png'
import keysHome from '../images/keys-home.png'
import { Image } from '@astrojs/image/components'
---

<Layout title="hitta avsnitt - asdf">
  <main class="main">
    <h1>hitta avsnitt</h1>
    <input id="searchInput" class="doodle" />
    <div id="episodeList"></div>
    <Footer />
    <GreenBlob class="green-blob" />
    <Image src={keysEnter} alt="" class="keys-enter bg-image" />
    <Image src={keysHeart} alt="" class="keys-heart bg-image" />
    <Image src={keysHome} alt="" class="keys-home bg-image" />
  </main>
  <div class="yellow-blob-wrapper">
    <YellowBlob class="yellow-blob" />
  </div>
</Layout>

<script>
  import algoliasearch from 'algoliasearch/lite'

  const debounce = (func: Function, delay: number) => {
    let timer: ReturnType<typeof setTimeout>
    return (...args: any) => {
      clearTimeout(timer)
      timer = setTimeout(() => {
        func(...args)
      }, delay)
    }
  }

  const removeLinksInBrackets = (content: string) => {
    return content.replace(/\[.*?\]/g, '')
  }

  interface Episode {
    slug: string
    title: string
    content: string
    date: string
    number: number
    joke: { setup: string; punchline: string }
    transcription: { author: string | null; timestamp: string; line: string }[]
  }

  const input = document.getElementById('searchInput') as HTMLInputElement
  const output = document.getElementById('episodeList')

  if (!input || !output) throw new Error('Input or output element not found')

  const client = algoliasearch('B59YEH9ZES', 'bdda85ef25daee6621cead0f549b5a1e')

  const search = async (query: string) => {
    if (!query) return []

    const { results } = await client.search<Episode>([
      {
        indexName: 'episodes',
        query,
        params: {
          hitsPerPage: 10,
        },
      },
    ])
    return results[0].hits
  }

  const debouncedSearch = debounce(async (value: string) => {
    const results = await search(value)

    output.innerHTML = ''

    results.forEach((episodeData) => {
      if (!episodeData) return

      const episode = document.createElement('div')
      episode.classList.add('episode')

      const title = episodeData._highlightResult?.title?.value || episodeData.title
      const titleLink = document.createElement('a')
      titleLink.classList.add('episode__title')
      titleLink.href = episodeData.slug
      const titleEl = document.createElement('h3')
      titleEl.innerHTML = title
      titleLink.appendChild(titleEl)
      episode.appendChild(titleLink)

      const contentEl = document.createElement('p')
      contentEl.classList.add('episode__content')
      const contentSnippet = episodeData._snippetResult?.content
      if (contentSnippet && contentSnippet.matchLevel !== 'none') {
        const content = episodeData._snippetResult?.content.value || episodeData.content
        contentEl.innerHTML = removeLinksInBrackets(content)
        episode.appendChild(contentEl)
      } else {
        const content = episodeData.content
        contentEl.innerHTML = removeLinksInBrackets(content).slice(0, 200) + '...'
        episode.appendChild(contentEl)
      }

      const lineSnippets = episodeData._highlightResult?.transcription?.filter(
        (x) => x && x.line && x.line.matchLevel !== 'none'
      )
      if (lineSnippets && lineSnippets.length > 0) {
        const firstFive = lineSnippets.slice(0, 5)
        firstFive.forEach((lineSnippet) => {
          if (!lineSnippet || !lineSnippet.line) return

          const lineEl = document.createElement('div')
          lineEl.classList.add('episode__line')

          const timeStampEl = document.createElement('span')
          timeStampEl.classList.add('episode__timestamp')
          timeStampEl.innerHTML = lineSnippet.timestamp?.value || 'N/A'

          const textEl = document.createElement('span')
          textEl.innerHTML = lineSnippet.line.value

          lineEl.appendChild(timeStampEl)
          lineEl.appendChild(textEl)

          episode.appendChild(lineEl)
        })
        if (lineSnippets.length > 5) {
          const moreHits = lineSnippets.length - 5
          const moreEl = document.createElement('span')
          moreEl.classList.add('episode__more')
          moreEl.innerHTML = `...och ${moreHits} ${
            moreHits === 1 ? 'träff' : `träffar`
          } till i transkriptionen`
          episode.appendChild(moreEl)
        }
      }

      output.appendChild(episode)
    })
  }, 200)

  input.addEventListener('input', (e) => {
    const value = (e.target as HTMLInputElement).value
    if (!value) {
      output.innerHTML = ''
      return
    }
    debouncedSearch(value)
  })
</script>

<style>
  .main {
    position: relative;
  }

  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }

  #searchInput {
    margin-bottom: 36px;
  }

  #episodeList {
    display: flex;
    flex-direction: column;
    gap: 24px;
  }

  #episodeList :global(em) {
    font-weight: bold;
    font-style: normal;
  }

  #episodeList :global(.episode__title) {
    font-weight: bold;
    font-style: normal;
    color: black;
    text-decoration: none;
  }

  #episodeList :global(.episode__title h3) {
    font-variation-settings: 'BNCE' 0, 'wght' 600;
  }

  #episodeList :global(.episode) {
    display: flex;
    flex-direction: column;
  }

  #episodeList :global(.episode__content) {
    white-space: pre-wrap;
    margin-bottom: 16px;
  }
  #episodeList :global(.episode__line) {
    white-space: pre-wrap;
    display: flex;
    gap: 16px;
  }
  #episodeList :global(.episode__timestamp) {
    opacity: 0.6;
  }
  #episodeList :global(.episode__more) {
    margin-left: auto;
  }

  .yellow-blob-wrapper {
    width: 500px;
    height: 500px;
    overflow: hidden;
    position: absolute;
    right: 0;
    bottom: 0;
  }
  .yellow-blob {
    right: -250px;
    top: 180px;
  }

  .green-blob {
    top: -185px;
    left: -800px;
    transform: rotateZ(130deg);
  }

  .keys-heart {
    left: -300px;
    width: 200px;
    top: 200px;
  }
  .keys-enter {
    top: 400px;
    width: 200px;
  }
  .keys-home {
    right: -400px;
    width: 300px;
  }
</style>
